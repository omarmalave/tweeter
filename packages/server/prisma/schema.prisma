generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastLogin   DateTime?
  profile     Profile?     @relation(fields: [profileId], references: [id])
  profileId   Int?
  tweets      Tweet[]
  following   Follow[]     @relation("UserFollows")
  followers   Follow[]     @relation("UserFollowers")
  retweets    Retweet[]
  savedTweets SavedTweet[]
  comment     Comment[]
  like        Like[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String
  avatar    String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model Tweet {
  id          Int          @id @default(autoincrement())
  text        String
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  comments    Comment[]
  likes       Like[]
  retweets    Retweet[]
  savedTweets SavedTweet[]
  hashtags    Hashtag[]
  privacy     Privacy      @default(PUBLIC)
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
  likes     Like[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("UserFollows", fields: [followingId], references: [id])
  followingId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Retweet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
}

model SavedTweet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  tag       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweets    Tweet[]
}

enum Privacy {
  PUBLIC
  FOLLOWERS_ONLY
}
